Prerequisites
Ensure you have:

Java 11+ installed: java -version

WSL2 Ubuntu up and running

Network connectivity between WSL2 and Windows (test using ping)

Install Kafka and Zookeeper
==============================
# Update and install Java
sudo apt update
sudo apt install default-jdk -y

# Download Kafka (latest 3.x is fine)
wget https://downloads.apache.org/kafka/3.7.0/kafka_2.13-3.7.0.tgz
tar -xvzf kafka_2.13-3.7.0.tgz
mv kafka_2.13-3.7.0 kafka
cd kafka

Configure server.properties
==================================
Edit config/server.properties:

# Replace with your actual WSL IP from: ip addr | grep eth0
listeners=PLAINTEXT://0.0.0.0:9092
advertised.listeners=PLAINTEXT://<WSL_IP>:9092
zookeeper.connect=localhost:2181

Start Zookeeper and Kafka
# Terminal 1
bin/zookeeper-server-start.sh config/zookeeper.properties

# Terminal 2
bin/kafka-server-start.sh config/server.properties


Verify with:
# List topics (should return empty at first)
bin/kafka-topics.sh --list --bootstrap-server <WSL_IP>:9092
# bin/kafka-topics.sh --list --bootstrap-server  172.24.113.151:9092

Test Kafka Access from Windows
On your Windows machine (with kafka-console-producer.sh available or using Spring Boot):

Manually Create the Topic
Instead of relying on auto-creation, manually create the topic first:

bin/kafka-topics.sh \
  --create \
  --topic test \
  --bootstrap-server 172.24.113.151:9092 \
  --replication-factor 1 \
  --partitions 1

# From Windows terminal (optional)
bin/kafka-console-producer.sh --broker-list <WSL_IP>:9092 --topic test
# bin/kafka-console-producer.sh --broker-list  172.24.113.151:9092 --topic test


Step 2: Notification Microservice (Kafka Producer Gateway)
Purpose:
Acts as a gateway — receives HTTP requests and forwards messages to Kafka.

Connects to Kafka running at 172.24.113.151:9092 (your WSL2 broker).

Project Structure
notification-service/
├── src/
│   └── main/
│       ├── java/com/example/notification/
│       │   ├── NotificationController.java
│       │   └── KafkaProducerService.java
│       └── resources/
│           └── application.yml
├── build.gradle / pom.xml
└── ...
Dependencies (Maven)

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.kafka</groupId>
        <artifactId>spring-kafka</artifactId>
    </dependency>
</dependencies>

application.yml
server:
  port: 8081

spring:
  kafka:
    bootstrap-servers: 172.24.113.151:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

KafkaProducerService.java

@Service
public class KafkaProducerService {

    private final KafkaTemplate<String, String> kafkaTemplate;
    private final String topic = "notifications";

    public KafkaProducerService(KafkaTemplate<String, String> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    public void sendNotification(String message) {
        kafkaTemplate.send(topic, message);
    }
}
NotificationController.java

@RestController
@RequestMapping("/api/notifications")
public class NotificationController {

    private final KafkaProducerService producerService;

    public NotificationController(KafkaProducerService producerService) {
        this.producerService = producerService;
    }

    @PostMapping
    public ResponseEntity<String> send(@RequestBody String message) {
        producerService.sendNotification(message);
        return ResponseEntity.ok("Message sent to Kafka");
    }
}
Run It:
Start the app, then POST to it:
Use the Right IP from WSL to Access Windows Host
In WSL, localhost refers to the WSL Linux VM — not your Windows host.
To call the Spring Boot app running on Windows from WSL, you need to use your Windows host IP.

Get Your Actual Windows Host IP from Inside WSL2

Run this in WSL2 to extract the real Windows host IP:

That’s the IP of your Windows host from WSL.

curl -X POST http://172.24.112.1:8081/api/notifications -H "Content-Type: text/plain" -d "Hello from Notification Service"

You should see the message show up in Kafka.
wsl2ubuntu@Stephen-Samuels:~$ curl -X POST http://172.24.112.1:8081/api/notifications -H "Content-Type: text/plain" -d "Hello from Notification Service"
Message sent to Kafka
wsl2ubuntu@Stephen-Samuels:~/kafka_2.13-3.0.0$ bin/kafka-console-consumer.sh   --bootstrap-server 172.24.113.151:9092   --topic notifications   --from-beginning
Hello from Notification Service

That confirms it! Your message flowed like this:
Windows Spring Boot (Notification Service) 
      ⮕ Kafka on WSL2 
          ⮕ WSL2 Console Consumer printed the message 
Everything is working perfectly:

Producer 

Kafka broker 

Manual consumer

Use Kafka Console Consumer (WSL2)
You can use the built-in Kafka console consumer to check that the message landed in the topic:
** Create the topic if necessary

bin/kafka-topics.sh \
  --create \
  --topic notifications \
  --bootstrap-server 172.24.113.151:9092 \
  --replication-factor 1 \
  --partitions 1


bin/kafka-console-consumer.sh \
  --bootstrap-server 172.24.113.151:9092 \
  --topic notifications \
  --from-beginning

This will listen to messages on the notifications topic and print them as they arrive — including what your Spring Boot app sent.

Step-by-Step: Check the Config
1. Open server.properties
Run this inside your Kafka directory:
nano ~/kafka/config/server.properties

2. Search for the Property
Look for this line (you can use Ctrl + W in nano to search):


auto.create.topics.enable
If It’s Present:

auto.create.topics.enable=true
You're good! Kafka will auto-create topics when your app or CLI writes to one that doesn’t exist.

If It’s Missing:
Kafka defaults to true — so auto-creation is still enabled by default, but you can make it explicit by adding:


auto.create.topics.enable=true

Save and exit nano (Ctrl + O, then Enter, then Ctrl + X).

Restart Kafka After Changes
If you edited the file, restart the broker:


# First stop the broker (use pkill to be sure)
pkill -f kafka.Kafka

# Start Zookeeper (if not already running)
bin/zookeeper-server-start.sh config/zookeeper.properties

# In another terminal:
bin/kafka-server-start.sh config/server.properties

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Kafka Consumer Microservice
Purpose:
Listens to the notifications topic

Logs or processes incoming messages from Kafka

Project Structure
notification-consumer/
├── src/
│   └── main/
│       ├── java/com/example/consumer/
│       │   ├── KafkaConsumerService.java
│       └── resources/
│           └── application.yml
├── build.gradle / pom.xml
└── ...



 Kafka Consumer + Database (Spring Boot + JPA + Kafka)
Goal:
Listen to Kafka topic notifications

Save each message into a relational database (like H2, PostgreSQL, MySQL)

notification-consumer-db/
├── src/
│   └── main/
│       ├── java/com/example/consumer/
│       │   ├── NotificationConsumerApplication.java
│       │   ├── service/                    # Kafka consumption logic
│       │   │   └── KafkaConsumerService.java
│       │   ├── entity/                      # JPA entity
│       │   │   └── Notification.java
│       │   └── repository/                  # Spring Data repository
│       │       └── NotificationRepository.java
│       └── resources/
│           ├── application.yml
│           └── data.sql (optional, for test data)
├── pom.xml
└── README.md

Add These Dependencies (Maven)

<dependencies>
    <!-- Kafka -->
    <dependency>
        <groupId>org.springframework.kafka</groupId>
        <artifactId>spring-kafka</artifactId>
    </dependency>

    <!-- Spring Data JPA -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- H2 or any other DB (for dev) -->
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <scope>runtime</scope>
    </dependency>
</dependencies>


Test It
Run the consumer service

Send a message via POST

Watch the message get saved in DB — verify in H2 console (http://localhost:8080/h2-console) or via logs


You're officially running:

A Kafka broker on WSL2

A notification producer via REST on Windows

A consumer microservice that logs and persists messages

That’s a rock-solid dev architecture — production-worthy with a few tweaks like auth, schema validation, or retries.

POST to NotificationService (Windows)
 ⮕ Sent to Kafka (WSL2)
   ⮕ Consumed by Consumer Microservice
     ⮕ Inserted into H2 database via JPA
===========================================================================================================================
wsl2ubuntu@Stephen-Samuels:~/kafka_2.13-3.0.0/config$ pkill -f kafka.Kafka
wsl2ubuntu@Stephen-Samuels:~/kafka_2.13-3.0.0/config$ pkill -f zookeeper
****************************************************************************************************************************


